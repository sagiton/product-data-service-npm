(function (angular) {
    angular.module('pds.environment', []);
    angular.module('product-data-service', ['pds.catalog', 'pds.navigation', 'pds.environment', 'pds.search', 'pds.common', 'ui.router', 'ngSanitize']);
})(angular);

(function () { 
 return angular.module("pds.environment")
.constant("config", {
  "metaTags": {
    "siteName": "BoschTT"
  },
  "urlSchema": {
    "trailingSlash": false
  },
  "pdsPathPrefix": "/ocs",
  "forceLanguage": null,
  "search": {
    "defaultImage": "default-search"
  }
});

})();

(function () { 
 return angular.module("pds.environment")
.constant("env", {
  "endPoint": {
    "productDataService": "https://services-rvw.kittelberger.net/productdata/",
    "contentService": "http://localhost:8080/boschtt-cs-dev/",
    "searchService": "https://services-rvw.kittelberger.net/search/",
    "ocsMediaEndpoint": "https://services-rvw.kittelberger.net/asset/"
  },
  "search": {
    "cmsChannelDiscriminator": "deCHCmsDiscriminator",
    "pdsChannelDiscriminator": "buderusPdsDiscriminator"
  }
});

})();

angular.module("pds.environment").run(["$templateCache", function($templateCache) {$templateCache.put("catalog.html","<catalog-template catalog-id=\"vm.catalogId\"><section ng-if=\"vm.catalog.showImage()\" class=\"section fs-keyvisual p-a-0\"><div class=\"slide\"><div class=\"slide-image slide-image-transparent-30\"><img class=\"img-responsive\" ng-src=\"{{vm.catalog.image.value | imageUrl: \'img-lg\'}}\" alt=\"{{vm.catalog.name.value}}\" title=\"{{vm.catalog.name.value}}\"></div><div class=\"slide-caption text-center\"><h1 class=\"hl-1 slide-title\" ng-if=\"vm.catalog.name\">{{vm.catalog.name.value}}</h1><p ng-if=\"vm.catalog.title\">{{vm.catalog.title.value}}</p></div></div></section><section class=\"section fs-headline\" ng-if=\"vm.catalog.description\"><div class=\"container-fluid text-center\"><div class=\"row\"><div class=\"col-md-10 col-md-offset-1\"><p>{{vm.catalog.description.value}}</p></div></div></div></section><section ng-if=\"vm.catalog.showTiles()\" class=\"section fs-four-column-media-teaser\"><div class=\"container-fluid\"><div class=\"flex-row\"><a class=\"card col-xs-6 col-sm-4 col-md-3\" ng-repeat=\"tile in vm.catalog.tiles\" ocs-navigate=\"tile.id.value\"><img class=\"card-img-top img-responsive img-widen\" ng-src=\"{{tile.image.value | imageUrl: \'img-sm\'}}\" alt=\"{{tile.name.value}}\" title=\"{{tile.name.value}}\"><div class=\"card-block\" ng-if=\"tile.title\" equalize-teaser-height><div class=\"card-title hl-4 text-wrap\">{{tile.title.value}}</div><p class=\"card-text\">{{tile.description.value}}</p></div><div class=\"card-block-link\"><span class=\"link-more\" translate=\"MORE.DETAILS\"></span></div></a></div></div></section><section ng-if=\"vm.catalog.showList()\" class=\"section fs-two-column-square-media-text\"><div class=\"container-fluid bg-grey-light\" ng-repeat=\"item in vm.catalog.list\"><div class=\"flex-row\"><div class=\"col-sm-4 col-media\"><div class=\"relative-container\" ng-if=\"item.new.value\"><div class=\"label-container small left\"><div class=\"label-wrapper-outer\"><div class=\"label-wrapper-inner\"><div class=\"label-content\" translate=\"NEW.LABEL\"></div></div></div></div></div><img class=\"img-responsive img-widen\" ng-src=\"{{item.image.value | imageUrl: \'img-md\'}}\" alt=\"{{item.name.value}}\" title=\"{{item.name.value}}\"></div><div class=\"col-sm-8 col-text\"><div class=\"hl-3 column-title text-primary\"><a ocs-navigate=\"item.id.value\">{{item.title.value}}</a></div><ul class=\"checklist\" ng-if=\"item.bullets.length\"><li ng-repeat=\"bullet in item.bullets\">{{bullet}}</li></ul><ul class=\"list-inline button-list\"><li><a class=\"btn btn-primary\" ocs-navigate=\"item.id.value\"><span translate=\"MORE.DETAILS\"></span></a></li></ul></div></div></div></section><section ng-if=\"vm.catalog.showTeaser()\" class=\"section fs-two-column-media-text-with-logo bg-grey\"><div class=\"container-fluid\"><div class=\"row\" ng-if=\"vm.catalog.new.value\"><div class=\"relative-container\"><div class=\"label-container large right\"><div class=\"label-wrapper-outer\"><div class=\"label-wrapper-inner\"><div class=\"label-content\" translate=\"NEW.LABEL\"></div></div></div><div class=\"label-wrapper-outer\"><img class=\"\" ng-src=\"{{vm.catalog.newImage}}\" alt=\"\" title=\"\"></div></div></div></div><div class=\"row\"><div class=\"col-sm-6 col-media\"><div class=\"js-slick-slider slick-image-slider\" data-slick=\'{\"arrows\": false, \"dots\": true, \"autoplay\": true, \"autoplaySpeed\": 4000, \"speed\": 1000, \"cssEase\": \"ease-in-out\"}\'><div class=\"slide\"><img class=\"img-responsive img-widen\" ng-src=\"{{vm.catalog.image.value | imageUrl: \'img-md\'}}\" alt=\"{{vm.catalog.name.value}}\" title=\"{{vm.catalog.name.value}}\"> <img class=\"img-overlay\" ng-if=\"vm.catalog.energyEfficiency.image\" ng-src=\"{{vm.catalog.energyEfficiency.image.value}}\"></div></div></div><div class=\"col-sm-6 col-text\"><h1 class=\"hl-2 product-name\">{{vm.catalog.name.value}}</h1><p>{{vm.catalog.title.value}}</p></div></div></div></section><section class=\"section fs-two-column-headline-text bg-grey-dark\" ng-if=\"vm.catalog.showTechnicalInformation()\"><div class=\"container-fluid\"><div class=\"row\"><div class=\"col-sm-4\"><h2 class=\"section-title\" translate=\"TECHNICAL.INFORMATION\"></h2></div><div class=\"col-sm-8\"><ul class=\"checklist\"><li ng-repeat=\"info in vm.catalog.technicalInformation\">{{info}}</li></ul></div></div></div></section><section class=\"section fs-two-column-icon-accordion\" ng-if=\"vm.catalog.showMoreDetails()\"><div class=\"container-fluid\"><h2 class=\"section-title text-primary text-center\">{{vm.catalog.moreDetails.title.value}}</h2><div id=\"acrd-872921587\" class=\"accordion panel-group m-b-0\" role=\"tablist\" aria-multiselectable=\"true\"><div class=\"panel\" ng-repeat=\"item in vm.catalog.moreDetails.elements\"><div id=\"acrd-872921587-heading-{{$index}}\" class=\"panel-heading\" role=\"tab\"><h3 class=\"panel-title\"><a class=\"collapsed\" role=\"button\" data-toggle=\"collapse\" data-parent=\"#acrd-872921587\" data-target=\"#acrd-872921587-panel-{{$index}}\" aria-controls=\"acrd-872921587-panel-{{$index}}\" aria-expanded=\"false\">{{item.title}}</a></h3></div><div id=\"acrd-872921587-panel-{{$index}}\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"acrd-872921587-heading-{{$index}}\"><article class=\"panel-body article\"><p ng-if=\"!item.description.elements\" ng-bind-html=\"item.description | convertWhitespaces\"></p><ul ng-if=\"item.description.elements\"><li ng-repeat=\"el in item.description.elements\">{{el}}</li></ul><img ng-if=\"item.image\" class=\"img-responsive img-widen m-b-1\" ng-src=\"{{item.image | imageUrl}}\" alt=\"{{item.title}}\" title=\"{{item.title}}\"></article></div></div></div></div></section><section class=\"section fs-table-scrollable\" ng-if=\"vm.catalog.showTechnicalTable()\"><div class=\"container-fluid\"><h2 class=\"section-title text-primary text-center\" translate=\"TECHNICAL.DATA\"></h2><div class=\"row scrollable-table-wrapper\"><div class=\"col-xs-6 col-sm-4 col-md-3 p-r-0\"><a class=\"card card-sticky\"><table class=\"table js-data-table\" data-ordering=\"false\" data-paging=\"false\" data-searching=\"false\" data-info=\"false\" data-auto-width=\"false\" data-responsive=\"true\"><thead><tr><th class=\"table-center\">&nbsp;</th></tr></thead><tbody><tr ng-repeat=\"attribute in vm.catalog.table.attributes\"><td><span class=\"td-headline\">{{attribute.name}}</span></td></tr></tbody></table></a></div><div class=\"col-xs-6 col-sm-8 col-md-9 p-l-0\"><div class=\"js-slick-slider slick-content-slider js-full-width-slick-track\" data-slick=\'{\"arrows\": true, \"appendArrows\": \".scrollable-table-wrapper\", \"appendDots\": \".scrollable-table-wrapper\", \"dots\": true, \"infinite\": false, \"speed\": 500, \"cssEase\": \"ease-in-out\", \"slidesToShow\": 3, \"slidesToScroll\": 1, \"responsive\": [{ \"breakpoint\": 992, \"settings\": { \"arrows\": false, \"slidesToShow\": 2, \"slidesToScroll\": 2}}, { \"breakpoint\": 768, \"settings\": { \"arrows\": false, \"slidesToShow\": 1, \"slidesToScroll\": 1}}]}\'><div class=\"card\" ng-repeat=\"product in vm.catalog.table.products\"><table class=\"table js-data-table\" data-ordering=\"false\" data-paging=\"false\" data-searching=\"false\" data-info=\"false\" data-auto-width=\"false\" data-responsive=\"true\"><thead><tr><th class=\"table-center\">{{product.header}}</th></tr></thead><tbody><tr ng-repeat=\"attribute in product.attributes\" synchronize-height><td><span attribute-value=\"attribute\" attribute-alt=\"product.name\" attribute-title=\"product.name\"></span><span ng-if=\"attribute.unit != null\">{{attribute.unit}}</span></td></tr></tbody></table></div></div></div></div></div></section><section class=\"section\" ng-if=\"vm.catalog.showFootnotes()\"><div class=\"container-fluid\"><div class=\"row\"><div class=\"col-md-10\"><div class=\"footnotes\"><ol class=\"footnote-ordered-list\" ng-if=\"vm.catalog.footnotes.type == \'list\'\"><li ng-repeat=\"item in vm.catalog.footnotes.value.elements\">{{item}}</li></ol><p class=\"footnote-paragraph\" ng-if=\"vm.catalog.footnotes.type == \'string\'\">{{vm.catalog.footnotes.value}}</p></div></div></div></div></section></catalog-template>");
$templateCache.put("catalog3.html","<catalog-template catalog-id=\"vm.catalogId\"><div ng-repeat=\"section in vm.catalog.sections\"><div ng-init=\"$section = section.params\" ng-include=\"\'section-\' + section.name\"></div></div></catalog-template><script type=\"text/ng-template\" id=\"section-KEYVISUAL\"><section class=\"section fs-keyvisual p-a-0\">\n    <div class=\"slide\">\n        <div class=\"slide-image slide-image-transparent-30\">\n            <img class=\"img-responsive\" ng-src=\"{{$section.backgroundImgUrl | imageUrl: \'img-xlg\'}}\" alt=\"{{$section.name}}\" title=\"{{$section.name}}\">\n        </div>\n        <div class=\"slide-caption text-center\">\n            <h1 class=\"hl-1 slide-title\" ng-if=\"$section.title\">{{$section.title}}</h1>\n            <p ng-if=\"$section.subtitle\">{{$section.subtitle}}</p>\n        </div>\n    </div>\n</section></script><script type=\"text/ng-template\" id=\"section-CATEGORY_DESCRIPTION\"><section class=\"section fs-headline\" ng-if=\"$section.text\">\n    <div class=\"container-fluid text-center\">\n        <div class=\"row\">\n            <div class=\"col-md-10 col-md-offset-1\">\n                <p>{{$section.text}}</p>\n            </div>\n        </div>\n    </div>\n</section></script><script type=\"text/ng-template\" id=\"section-TILES\"><section class=\"section fs-four-column-media-teaser\" ng-if=\"vm.isArray($section.items)\">\n    <div class=\"container-fluid\">\n        <div class=\"flex-row\">\n            <a class=\"card col-xs-6 col-sm-4 col-md-3\" ng-repeat=\"tile in $section.items\" ocs-navigate=\"tile.catalogId\">\n                <img class=\"card-img-top img-responsive img-widen\" ng-src=\"{{tile.imageUrl | imageUrl: \'img-md\'}}\" alt=\"{{tile.title}}\" title=\"{{tile.title}}\">\n                <div class=\"card-block\" ng-if=\"tile.title\" equalize-teaser-height>\n                    <div class=\"card-title hl-4\">{{tile.title}}</div>\n                    <p class=\"card-text\">{{tile.subtitle}}</p>\n                </div>\n                <div class=\"card-block-link\">\n                    <span class=\"link-more\" translate=\"MORE.DETAILS\"></span>\n                </div>\n            </a>\n        </div>\n    </div>\n</section></script><script type=\"text/ng-template\" id=\"section-LIST\"><section class=\"section fs-two-column-square-media-text\">\n    <div class=\"container-fluid bg-grey-light\" ng-repeat=\"item in $section.items\">\n        <div class=\"flex-row\">\n            <div class=\"col-sm-4 col-media\">\n                <div class=\"relative-container\" ng-if=\"item.new\">\n                    <div class=\"label-container small left\">\n                        <div class=\"label-wrapper-outer\">\n                            <div class=\"label-wrapper-inner\">\n                                <div class=\"label-content\" translate=\"NEW.LABEL\"></div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <img class=\"img-responsive img-widen\" ng-src=\"{{item.imageUrl | imageUrl: \'img-lg\'}}\" alt=\"{{item.title}}\" title=\"{{item.title}}\">\n            </div>\n            <div class=\"col-sm-8 col-text\">\n                <div class=\"product-type text-primary\" ng-if=\"item.type\">{{item.type}}</div>\n                <div class=\"hl-3 column-title text-primary\">\n                    <a ng-if=\"!item.detailsHidden\" ocs-navigate=\"item.catalogId\">{{item.title}}</a>\n                    <div ng-if=\"item.detailsHidden\">{{item.title}}</div>\n                </div>\n                <p ng-if=\"!vm.isArray(item.subtitle)\">{{item.subtitle}}</p>\n                <ul ng-if=\"vm.isArray(item.subtitle)\" class=\"children-list\">\n                    <li ng-repeat=\"bullet in item.subtitle\">{{bullet}}</li>\n                </ul>\n                <ul class=\"list-inline button-list\">\n                    <li>\n                        <a ng-if=\"!item.detailsHidden\" class=\"btn btn-primary\" ocs-navigate=\"item.catalogId\"><span translate=\"MORE.DETAILS\"></span></a>\n                    </li>\n                </ul>\n            </div>\n        </div>\n    </div>\n</section></script><script type=\"text/ng-template\" id=\"section-LIST_CARD\"><section class=\"section fs-two-column-media-text\" ng-repeat=\"item in $section.items\">\n    <div class=\"container-fluid\">\n        <div class=\"row\">\n            <a ng-if=\"!item.detailsHidden\" class=\"card\" ocs-navigate=\"item.catalogId\" ng-include=\"\'product-card-image\'\"></a>\n            <div ng-if=\"item.detailsHidden\" class=\"card\" ng-include=\"\'product-card-image\'\"></div>\n\n            <div class=\"col-sm-6 col-text\">\n                <a ng-if=\"!item.detailsHidden\" class=\"card\" ocs-navigate=\"item.catalogId\" ng-include=\"\'product-card-details\'\"></a>\n                <div ng-if=\"item.detailsHidden\" class=\"card\" ng-include=\"\'product-card-details\'\"></div>\n            </div>\n        </div>\n    </div>\n</section></script><script type=\"text/ng-template\" id=\"product-card-image\"><div class=\"col-sm-6 col-media\">\n        <div class=\"relative-container\" ng-if=\"item.new\">\n            <div class=\"label-container small left\">\n                <div class=\"label-wrapper-outer\">\n                    <div class=\"label-wrapper-inner\">\n                        <div class=\"label-content\" translate=\"NEW.LABEL\"></div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <img class=\"img-responsive img-widen\" ng-src=\"{{item.imageUrl | imageUrl: \'img-lg\'}}\" alt=\"{{item.title}}\" title=\"{{item.title}}\" />\n    </div></script><script type=\"text/ng-template\" id=\"product-card-details\"><div class=\"product-type text-primary\">{{item.type}}</div>\n    <div class=\"hl-3 product-name text-primary\">{{item.title}}</div>\n\n    <ul class=\"product-benefits\" ng-if=\"vm.isArray(item.subtitle)\">\n        <li ng-repeat=\"sub in item.subtitle track by $index\" ng-if=\"sub\">{{sub}}</li>\n    </ul>\n    <div ng-if=\"!vm.isArray(item.subtitle)\">{{item.subtitle}}</div>\n\n    <a class=\"link-more\" ng-if=\"!item.detailsHidden\" ocs-navigate=\"item.catalogId\"><span translate=\"DETAILED_PRODUCT_DESCRIPTION\"></span>&nbsp;{{item.title}}</a></script><script type=\"text/ng-template\" id=\"section-PRODUCT_HEADER\"><section class=\"section fs-two-column-media-text-with-logo bg-grey\">\n    <div class=\"container-fluid\">\n        <div class=\"row\" ng-if=\"$section.new\">\n            <div class=\"relative-container\">\n                <div class=\"label-container large right\">\n                    <div class=\"label-wrapper-outer\">\n                        <div class=\"label-wrapper-inner\">\n                            <div class=\"label-content\" translate=\"NEW.LABEL\"></div>\n                        </div>\n                    </div>\n                    <div class=\"label-wrapper-outer\">\n                        <img class=\"\" ng-src=\"{{vm.catalog.newImage}}\" alt=\"\" title=\"\">\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class=\"row\">\n            <div class=\"col-sm-6 col-media\">\n                <div class=\"js-slick-slider slick-image-slider\"\n                     data-slick=\'{\"arrows\": false, \"dots\": true, \"autoplay\": true, \"autoplaySpeed\": 4000, \"speed\": 1000, \"cssEase\": \"ease-in-out\"}\'>\n                    <div class=\"slide\">\n                        <img class=\"img-responsive img-widen\" ng-src=\"{{$section.productImgUrl | imageUrl: \'img-lg\'}}\" alt=\"{{$section.productName}}\" title=\"{{$section.productName}}\">\n                        <img class=\"img-overlay\" ng-if=\"$section.energyEfficiency.image\" ng-src=\"{{$section.energyEfficiency.image}}\" />\n                    </div>\n                </div>\n            </div>\n            <div class=\"col-sm-6 col-text\">\n                <h1 class=\"hl-2 product-name\">{{$section.productName}}</h1>\n                <p>{{$section.subtitle}}</p>\n            </div>\n        </div>\n    </div>\n</section></script><script type=\"text/ng-template\" id=\"section-TECHNICAL_INFORMATION\"><section class=\"section fs-two-column-headline-text bg-grey-dark bg-blue\">\n    <div class=\"container-fluid\">\n        <div class=\"row\">\n            <div class=\"col-sm-3\">\n                <div class=\"hl-3 section-title\">\n                    <span ng-if=\"$section.title\">{{$section.title}}</span>\n                    <span ng-if=\"!$section.title\" translate=\"TECHNICAL.INFORMATION\"></span>\n                </div>\n                <a ng-if=\"$section.link\" class=\"link-more\" ng-href=\"{{$section.link | imageUrl}}\" target=\"_blank\">{{\'PRODUCT.LEAFLET\' | translate}}</a>\n            </div>\n            <div class=\"col-sm-offset-1 col-sm-8\">\n                <!--TODO Style depending on consumer (checklist, bullets)-->\n                <ul class=\"technical-information-list\" ng-if=\"vm.isArray($section.list)\">\n                    <li ng-repeat=\"info in $section.list track by $index\" ng-if=\"info\">{{info}}</li>\n                </ul>\n                <span ng-if=\"$section.description\" ng-bind-html=\"$section.description\"></span>\n            </div>\n        </div>\n    </div>\n</section></script><script type=\"text/ng-template\" id=\"section-MORE_INFORMATION\"><section class=\"section fs-two-column-icon-accordion\">\n    <div class=\"container-fluid\">\n        <h2 class=\"section-title text-primary text-center\">{{$section.headlineDetails}}</h2>\n        <div id=\"acrd-872921587\" class=\"accordion panel-group m-b-0\" role=\"tablist\" aria-multiselectable=\"true\">\n            <div class=\"panel\" ng-repeat=\"item in $section.items\">\n                <div id=\"acrd-872921587-heading-{{$index}}\" class=\"panel-heading\" role=\"tab\">\n                    <h3 class=\"panel-title\">\n                        <a class=\"collapsed\" role=\"button\" data-toggle=\"collapse\" data-parent=\"#acrd-872921587\" data-target=\"#acrd-872921587-panel-{{$index}}\"\n                           aria-controls=\"acrd-872921587-panel-{{$index}}\" aria-expanded=\"false\">\n                            {{item.subHeadline}}\n                        </a>\n                    </h3>\n                </div>\n                <div id=\"acrd-872921587-panel-{{$index}}\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"acrd-872921587-heading-{{$index}}\">\n                    <article class=\"panel-body article\">\n                        <p ng-if=\"!vm.isArray(item.description)\" ng-bind-html=\"item.description\"></p>\n                        <ul ng-if=\"vm.isArray(item.description)\">\n                            <li ng-repeat=\"el in item.description track by $index\" ng-if=\"el\">{{el}}</li>\n                        </ul>\n                        <img ng-if=\"item.imageUrl\" class=\"img-responsive img-widen m-b-1\" ng-src=\"{{item.imageUrl | imageUrl}}\"\n                             alt=\"{{item.title}}\" title=\"{{item.title}}\" />\n                    </article>\n                </div>\n            </div>\n        </div>\n    </div>\n</section></script><script type=\"text/ng-template\" id=\"section-TECHNICAL_DATA_TABLE_SLIDER\"><section section-technical-data-table=\"$section\" class=\"section fs-table-scrollable\" full-width-table>\n    <div class=\"container-fluid\">\n        <h2 class=\"section-title text-primary text-center\" translate=\"TECHNICAL.DATA\"></h2>\n        <div class=\"row scrollable-table-wrapper\">\n            <div class=\"col-xs-6 col-sm-4 col-md-3 p-r-0\">\n                <a class=\"card card-column card-sticky\">\n                    <table class=\"table js-data-table\" data-ordering=\"false\" data-paging=\"false\" data-searching=\"false\" data-info=\"false\" data-auto-width=\"false\" data-responsive=\"true\">\n                        <thead><tr><th class=\"table-center\">&nbsp;</th></tr></thead>\n                        <tbody>\n                        <tr ng-repeat=\"attribute in $section.tableDefinition\">\n                            <td><span class=\"td-headline\">{{attribute.value.name}}</span></td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </a>\n            </div>\n            <div class=\"col-xs-6 col-sm-8 col-md-9 p-l-0\">\n                <div class=\"js-slick-slider slick-content-slider js-full-width-slick-track\"\n                     data-slick=\'{\"arrows\": true, \"appendArrows\": \".scrollable-table-wrapper\", \"appendDots\": \".scrollable-table-wrapper\",\n                      \"dots\": true, \"infinite\": false, \"speed\": 500, \"cssEase\": \"ease-in-out\", \"slidesToShow\": 3, \"slidesToScroll\": 1, \"responsive\": [\n                         { \"breakpoint\": 992, \"settings\": { \"arrows\": false, \"slidesToShow\": 2, \"slidesToScroll\": 2}},\n                         { \"breakpoint\": 768, \"settings\": { \"arrows\": false, \"slidesToShow\": 1, \"slidesToScroll\": 1}}\n                      ]}\'\n                     full-width-table>\n\n                    <div class=\"card card-column\" ng-repeat=\"product in $section.products\" scrollable-table-card>\n                        <table class=\"table js-data-table\" data-ordering=\"false\" data-paging=\"false\" data-searching=\"false\" data-info=\"false\"\n                               data-auto-width=\"false\" data-responsive=\"true\">\n                            <thead>\n                            <tr>\n                                <th class=\"table-center\">{{product.header.value}}</th>\n                            </tr>\n                            </thead>\n                            <tbody>\n\n                            <tr ng-repeat=\"attribute in $section.tableDefinition\" synchronize-height>\n                                <td ng-init=\"value = product[attribute.key] || {}\">\n                                    <span attribute-value=\"value\" attribute-alt=\"product.name\" attribute-title=\"product.name\"></span>\n                                    <span ng-if=\"attribute.value.unit\">{{attribute.value.unit}}</span>\n                                </td>\n                            </tr>\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</section></script><script type=\"text/ng-template\" id=\"section-TECHNICAL_DATA_TABLE\"><section section-technical-data-table=\"$section\" class=\"section fs-table\">\n        <div class=\"container-fluid\">\n            <h2 class=\"hl-2 section-title text-primary text-center\" translate=\"TECHNICAL.DATA\"></h2>\n\n            <table ocs-data-table=\"$section.products\" odt-responsive-change=\"$ctrl.responsiveChange($event, $table, $columns)\"\n                   ng-repeat=\"partition in $section.partitions\" class=\"table js-data-table\" data-ordering=\"false\"\n                   data-paging=\"false\" data-searching=\"false\" data-info=\"false\" data-auto-width=\"false\" data-responsive=\"true\">\n                <thead>\n                <tr>\n                    <th>&nbsp;</th>\n                    <th ng-repeat=\"header in partition\">{{header.title.value}}</th>\n                </tr>\n                </thead>\n                <tbody>\n                <tr ng-repeat=\"attribute in $section.tableDefinition\">\n                    <td>{{attribute.value.name}}&nbsp;</td>\n                    <td ng-repeat=\"product in partition\" ng-init=\"value = product[attribute.key]\">\n                        <span attribute-value=\"value\" attribute-alt=\"product.name\" attribute-title=\"product.name\"></span>\n                        <span ng-if=\"attribute.value.unit\">{{attribute.value.unit}}</span>\n                    </td>\n                </tr>\n                </tbody>\n            </table>\n        </div>\n    </section></script><script type=\"text/ng-template\" id=\"section-RELATED_PRODUCTS\"><section class=\"section fs-three-column-media-teaser bg-pattern\" ng-if=\"vm.isArray($section.products)\">\n    <div class=\"container-fluid\">\n        <h2 class=\"hl-2 section-title text-primary text-center\">{{::$section.title}}</h2>\n\n        <div class=\"flex-row js-slick-slider slick-content-slider\"\n             data-slick=\'{\"arrows\": false, \"dots\": true, \"infinite\": false, \"speed\": 1000, \"cssEase\": \"ease-in-out\", \"slidesToShow\": 3, \"slidesToScroll\": 3, \"responsive\": [{ \"breakpoint\": 992, \"settings\": { \"slidesToShow\": 2, \"slidesToScroll\": 2}}, { \"breakpoint\": 768, \"settings\": { \"slidesToShow\": 1, \"slidesToScroll\": 1}}]}\'>\n\n            <a ng-repeat=\"related in $section.products\" class=\"card col-xs-12 col-sm-6 col-md-4\" ocs-navigate=\"related.categoryId\">\n                <img class=\"card-img-top img-responsive img-widen\" ng-src=\"{{::related.componentImageUrl | imageUrl}}\" alt=\"{{related.productName}}\" title=\"{{related.productName}}\">\n                <div class=\"card-block\">\n                    <h3 class=\"hl-4 card-title\">{{::related.productName}}</h3>\n                    <span class=\"link-more\" translate=\"MORE.DETAILS\"></span>\n                </div>\n            </a>\n        </div>\n    </div>\n</section></script><script type=\"text/ng-template\" id=\"section-SEO_TEXT\"><section ng-if=\"$section.seoText\" class=\"section fs-category-text\">\n    <div class=\"container-fluid\">\n        <div class=\"row\">\n            <div ng-include=\"$section.seoText | imageUrl\"></div>\n        </div>\n    </div>\n</section></script><script type=\"text/ng-template\" id=\"section-FOOTNOTES\"><section class=\"section\">\n    <div class=\"container-fluid\">\n        <div class=\"row\">\n            <div class=\"col-md-10\">\n                <div class=\"footnotes\">\n                    <ol class=\"footnote-ordered-list\" ng-if=\"!vm.isArray($section.list) && $section.list\">\n                        <li>{{$section.list}}</li>\n                    </ol>\n                    <ol class=\"footnote-ordered-list\" ng-if=\"vm.isArray($section.list)\">\n                        <li ng-repeat=\"item in $section.list track by $index\" ng-if=\"item\">{{item}}</li>\n                    </ol>\n                    <p class=\"footnote-paragraph\" ng-if=\"$section.value\">{{$section.value}}</p>\n                    <p ng-if=\"$section.labels.system\" class=\"footnote-paragraph\" translate=\"ERP_SYSTEM_LABEL\"></p>\n                    <p ng-if=\"$section.labels.product\" class=\"footnote-paragraph\" translate=\"ERP_PRODUCT_LABEL\"></p>\n                    <p ng-if=\"$section.labels.boiler\" class=\"footnote-paragraph\" translate=\"B1_BOILER_LABEL\"></p>\n                </div>\n            </div>\n        </div>\n    </div>\n</section></script><script type=\"text/ng-template\" id=\"section-CATALOG_METADATA\"><catalog-metadata data=\"$section\"></catalog-metadata></script>");
$templateCache.put("component/navigation_menu.html","<span class=\"js-open-submenu icon-link-arrow-right visible-xs-block\"></span><a ocs-navigate=\"$ctrl.menu.id\" ng-bind=\"$ctrl.menu.name\">Produkte</a><ul simple-submenu class=\"nav submenu\" ng-if=\"$ctrl.menu.children.length\" ng-init=\"subLevel = $ctrl.menu.children\" ng-include=\"\'nav-level\'\"></ul><script type=\"text/ng-template\" id=\"nav-level\"><li ng-repeat=\"lvl in subLevel | limitTo: $ctrl.menu.maxNavigationItems as limitedLevel\">\n        <span ng-if=\"lvl.children.length\" class=\"js-open-submenu icon-link-arrow-right visible-xs-block\"></span>\n        <a target=\"_self\" ocs-navigate=\"lvl.id\">{{lvl.name}}</a>\n        <ul simple-submenu\n            class=\"nav submenu\"\n            ng-if=\"lvl.children.length\"\n            ng-init=\"subLevel = lvl.children\"\n            ng-include=\"\'nav-level\'\"></ul>\n    </li>\n    <li><a ng-if=\"limitedLevel.length < subLevel.length\" ocs-navigate=\"$parent.lvl.id\" class=\"btn btn-show hidden-xs hidden-sm no-animate\">Alles anzeigen</a></li></script>");
$templateCache.put("component/new_products.html","<section class=\"section fs-four-column-media-teaser\" ng-if=\"$ctrl.productsLoaded\"><div class=\"container-fluid text-center\"><div class=\"row\"><div class=\"col-md-10 col-md-offset-1\"><h2 class=\"section-title hl-3\" translate=\"NEW.HITS\"></h2></div></div></div><div class=\"container-fluid\"><slick class=\"flex-row js-slick-slider slick-content-slider\" settings=\"$ctrl.slickSettings\"><a class=\"card col-xs-6 col-sm-4 col-md-3 left no-animate\" ng-repeat=\"product in $ctrl.products\" ocs-navigate=\"product.id\"><div class=\"relative-container\"><div class=\"label-container small right\"><div class=\"label-wrapper-outer\"><div class=\"label-wrapper-inner\"><div class=\"label-content\" translate=\"NEW.LABEL\"></div></div></div></div></div><img class=\"card-img-top img-responsive img-widen\" ng-src=\"{{product.image | imageUrl}}\" alt=\"{{product.name}}\" title=\"{{product.name}}\"><div class=\"card-block\" ng-if=\"product.name\" equalize-teaser-height><h3 class=\"card-title hl-4 text-wrap\">{{product.name}}</h3><p class=\"card-text\">{{product.description}}</p><span class=\"link-more\" translate=\"MORE.DETAILS\"></span></div></a></slick></div></section>");
$templateCache.put("component/quick_search.html","<form id=\"header-search\" method=\"post\" role=\"search\" ng-submit=\"$ctrl.doSearch()\"><div class=\"form-group has-feedback\"><input active-search type=\"search\" class=\"form-control\" ng-model=\"$ctrl.quicksearch\" ng-model-options=\"{debounce: 200}\" typeahead-wait-ms=\"100\" typeahead-focus-first=\"false\" typeahead-on-select=\"$ctrl.goTo($item)\" ng-change=\"$ctrl.suggest()\" uib-typeahead=\"result as result.name for result in $ctrl.suggest()\" typeahead-loading=\"load\" placeholder=\"{{\'SEARCH.PLACEHOLDER\' | translate}}\"><span class=\"form-control-feedback icon-search\" aria-hidden=\"true\"></span><button hidden type=\"submit\"><i class=\"icon-search\"></i></button></div></form>");
$templateCache.put("component/search.html","<section class=\"section fs-search-field bg-grey\"><div class=\"container-fluid\"><h2 class=\"section-title hl-1 text-center\" translate=\"SEARCH.TERM\"></h2><form method=\"post\" role=\"form\"><div class=\"form-group has-feedback\"><input ng-keypress=\"$ctrl.onSearchInput($event)\" ng-model=\"$ctrl.searchTerm\" type=\"search\" class=\"form-control\" placeholder=\"{{\'SEARCH.PLACEHOLDER\' | translate}}\"><span class=\"form-control-feedback icon-search\" aria-hidden=\"true\"></span></div></form></div></section><section ng-if=\"$ctrl.totalLength === 0\" class=\"section fs-headline\"><div class=\"container-fluid\"><div class=\"row\"><div class=\"col-md-10\"><h4 class=\"hl-4 section-title\" translate=\"SEARCH.NO.RESULT.HEADLINE\" translate-values=\"{searchTerm: $ctrl.searchTerm}\"></h4><ul class=\"checklist margin-top\"><li ng-bind-html=\"$ctrl.contactText\"></li></ul></div></div></div></section><section ng-controller=\"ContentController as vm\" ng-if=\"$ctrl.totalLength === false\"><div class=\"loading-spinner loading-white\"><img src=\"/media/images/ajax-loader.gif\" class=\"spinner\"></div></section><section ng-if=\"$ctrl.totalLength > 0\" class=\"section fs-search-results js-waypoint-start\"><div class=\"container-fluid\"><div class=\"flex-row js-waypoint-end\"><div class=\"col-xs-12 col-md-4\"><nav hl-sticky offset-top=\"100\" id=\"nav-search-results\" class=\"hidden-print hidden-xs hidden-sm\"><h3 class=\"hl-4 m-t-0\" translate=\"SEARCH.QUICKNAVIGATION\"></h3><ul class=\"nav\"><li ng-repeat=\"(group, results) in $ctrl.finalSearchResults\"><a ng-click=\"$ctrl.goToAnchor(group)\"><span translate=\"SEARCH.CHANNEL.{{group}}\"></span>&nbsp;<span class=\"search-results-count\">({{results.length}})</span></a></li></ul></nav></div><div class=\"col-xs-12 col-md-8\"><div id=\"search-results\"><div class=\"search-results-header hidden-md hidden-lg\"><div class=\"dropdown\"><a class=\"hl-3 dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\">{{\'SEARCH.TOTAL.COUNT\' | translate}}<span class=\"search-results-count\">({{$ctrl.totalLength}})</span></a><ul id=\"nav-search-results-dropdown\" class=\"dropdown-menu\"><li class=\"active\"><a>{{\'SEARCH.TOTAL.COUNT\' | translate}}<span class=\"search-results-count\">({{$ctrl.totalLength}})</span></a></li><li ng-repeat=\"(group, results) in $ctrl.finalSearchResults\"><a ng-click=\"$ctrl.goToAnchor(group)\"><span translate=\"SEARCH.CHANNEL.{{group}}\"></span>&nbsp;<span class=\"search-results-count\">({{results.length}})</span></a></li></ul></div></div><div ng-repeat=\"(group, results) in $ctrl.finalSearchResults\" ng-if=\"results.length > 0\" id=\"{{group}}\" class=\"search-results-category\"><div class=\"category-header hidden-xs hidden-sm\"><h3><span translate=\"SEARCH.CHANNEL.{{group}}\"></span>&nbsp;<span class=\"search-results-count\">({{results.length}})</span></h3></div><div class=\"search-result media\" ng-repeat=\"item in results track by $index\"><div class=\"media-left\"><a><img src class=\"media-object\" http-src=\"item.imageUrl\" alt=\"{{item.name}}\" title=\"{{item.name}}\"></a></div><div class=\"media-body\"><h4 class=\"media-heading\">{{item.name}}</h4><p>{{item.text}}</p><a ng-click=\"$ctrl.goMore(item, group)\" class=\"link-more\" translate=\"MORE.DETAILS\"></a></div></div></div></div></div></div></div></section>");}]);
(function (angular) {
    angular.module('pds.common.route', ['ui.router', 'ncy-angular-breadcrumb', 'pds.environment']);
    angular.module('pds.common.service', []);
    angular.module('pds.common.config', ['pascalprecht.translate']);
    angular.module('pds.common.controller', ['ngAnimate', 'ngSanitize', 'datatables', 'hl.sticky', 'dcbImgFallback', 'slickCarousel']);
    angular.module('pds.common.model', []);
    angular.module('pds.common.factory', []);
    angular.module('pds.common.directive', []);
    angular.module('pds.common.filter', ['pds.environment']);
    angular.module('pds.common', ['pds.common.controller', 'pds.common.route', 'pds.common.service', 'pds.common.config', 'pds.common.model', 'pds.common.directive']);
})(angular);

(function (angular) {
    angular
        .module('pds.common.controller')
        .controller('ContentController', ContentController);

    ContentController.$inject = ['SpinnerService'];

    function ContentController(spinnerService) {
        var vm = this;

        vm.isSpinning = spinnerService.isLoading;
    }

})(angular);

(function (angular) {
    angular
        .module('pds.common.controller')
        .controller('headerController', HeaderController);

    HeaderController.$inject = ['$scope', '$location', 'locale', 'config', 'jsonFilter', '_', 'BreadcrumbService'];
    var contentGroups = ['WT.cg_n', 'WT.cg_s', 'WT.z_cg3', 'WT.z_cg4', 'WT.z_cg5', 'WT.z_cg6', 'WT.z_cg7', 'WT.z_cg8', 'WT.z_cg9', 'WT.z_cg10'];

    function HeaderController($scope, $location, locale, config, jsonFilter, _, BreadcrumbService) {
        var rootContentGroup = {name: config.metaTags.siteName};
        var vm = this;
        vm.url = $location.absUrl();
        vm.locale = locale.toString();
        vm.brand = config.metaTags.brand;
        vm.country = locale.country;
        vm.language = locale.language;

        $scope.$on('pds.header.update', function (event, params) {
            vm.title = params.title;
            vm.description = params.description;
            vm.image = params.image;
            vm.webTrends = params.webTrends;
            vm.siteName = params.siteName;
            vm.canonicalUrl = params.canonicalUrl;
        });

        $scope.$on('pds.header.update', function (event, params) {
            buildJsonLD({
                "@context": "http://schema.org/",
                "@type": "Product",
                "name" : params.title,
                "image": params.image,
                "description": params.description,
                "brand": config.metaTags.siteName
            });
        });

        //FIXME
        $scope.$on('pds.breadcrumb.update', function (event, params) {
            BreadcrumbService
                .build(params.catalogId)
                .then(function (breadcrumbs) {
                    buildJsonLD({
                        "@context": "http://schema.org/",
                        "@type": "BreadcrumbList",
                        "itemListElement": _.map(breadcrumbs, function (crumb, index) {
                            return {
                                '@type': 'ListItem',
                                position: index,
                                item: {
                                    '@id': crumb.url,
                                    name: crumb.name
                                }
                            }
                        })
                    });
                    return breadcrumbs;
                })
                .then(buildContentGroups);
        });

        function buildJsonLD(model) {
            angular
                .element('<script>')
                .attr('type', 'application/ld+json')
                .text(jsonFilter(model))
                .appendTo('head');
        }

        function buildContentGroups(tree) {
            tree.unshift(rootContentGroup);
            _.forEach(tree, function (element, idx) {
                addMeta(contentGroups[idx], element.name);
            });
        }


        function addMeta(name, content) {
            angular
                .element('meta[name="' + name + '"')
                .remove();
            angular
                .element('<meta>')
                .attr('name', name)
                .attr('content', content)
                .appendTo('head');
        }
    }

})(angular);

(function (angular) {
    angular
        .module('pds.common.controller')
        .controller('jsonLdController', JsonLdController);

    JsonLdController.$inject = ['$scope', '$location', 'BreadcrumbService', 'CatalogService', 'jsonFilter'];

    function JsonLdController($scope, $location, BreadcrumbService, CatalogService, jsonFilter) {
        var vm = this;
        vm.url = $location.absUrl();


    }

})(angular);

(function (angular, $) {
    angular
        .module('pds.common.config')
        .config(function () {
            $(document).ready(function () {
                $('a')
                    .filter(function (idx, el) {
                        return !$(el).attr('target');
                    })
                    .attr('target', '_self');
            })
        })
})(angular, $);

(function (angular, window) {
    angular
        .module('pds.common.config')
        .config(['$translateProvider', function ($translateProvider) {
            if (window.cmsTranslations) {
                $translateProvider
                    .translations('this', window.cmsTranslations)
                    .useSanitizeValueStrategy('sanitizeParameters')
                    .preferredLanguage('this')
                    .use('this');
            }
        }]);

})(angular, window);

(function (angular) {
    angular
        .module('pds.common.config')
        .provider('locale', LocaleProvider);


    function LocaleProvider() {
        var discoveryMethods = [];

        this.addDiscoveryMethod = function (method) {
            discoveryMethods.push(method);
            return this;
        };

        this.$get = ['_', function (_) {
            return new Locale(_, discoveryMethods);
        }];
    }

    function Locale(_, discoveryMethods) {
        var method = _.find(discoveryMethods, _.attempt);
        var result =  method ? method() : [];
        var country = result[1];
        var language = result[2];
        return {
            country: country,
            language: language,
            toString: function() {
                return this.language.toLowerCase() + "_" + this.country.toUpperCase();
            }
        };
    }
})(angular);

(function (angular) {
    angular
        .module('pds.common.config')
        .factory('_', ['$window', function ($window) {
            return $window._;
        }]);

})(angular);

(function (angular) {
    angular
        .module('pds.common.config')
        .factory('metaTag', MetaTag);

    MetaTag.$inject = [];

    function MetaTag() {

        return {
            getSiteChannel: getSiteChannel
        };

        function getSiteChannel() {
            return getMetaTagContentByName('meta[name="ocs-channel"]')
        }

        function getMetaTagContentByName(name) {
            return angular.element(name).attr('content') || ''
        }

    }
})(angular);

(function (angular) {
    angular
        .module('pds.common.config')
        .config(['localeProvider', function (localeProvider) {
            var localeUrlPattern = /^\/([a-zA-Z]{2})\/([a-zA-Z]{2})/;
            localeProvider.addDiscoveryMethod(function () {
                return localeUrlPattern.exec(new URI().path());
            });
        }]);

})(angular);

(function (angular) {

    angular
        .module('pds.common.config')
        .decorator('$window', ['$delegate', WindowDecorator]);

    function WindowDecorator($delegate) {
        $delegate.navigate = function (uri) {
            if (uri.indexOf('/') != 0) {
                uri = '/'.concat(uri);
            }
            $delegate.location.href = getBasePath() + uri;
        };
        $delegate.getBasePath = function getBasePath() {
            var basePath = angular.element('base').attr('href-override');

            if (!basePath)
                basePath = angular.element('base').attr('href');

            if (basePath.lastIndexOf('/') == (basePath.length - 1)) {
                basePath = basePath.slice(0, basePath.length - 1);
            }
            return basePath;
        };
        return $delegate;
    }
})(angular);

(function (angular) {
    angular
        .module('pds.common.filter')
        .filter('imageUrl', ImageUrlFilter);

    ImageUrlFilter.$inject = ['env', 'locale', 'metaTag'];

    var rootSrc = '/media/images/'

    var defaultImages = {
        'img-sm':  rootSrc + 'default-460x460.jpg',
        'img-md':  rootSrc + 'default-640x372.jpg',
        'img-lg':  rootSrc + 'default-680x440.jpg',
        'img-xlg': rootSrc + 'default-1600x560.jpg'
    };

    function ImageUrlFilter(env, locale, metaTag) {
        return function (mediaObject, size) {
            return mediaObject ? env.endPoint.ocsMediaEndpoint + metaTag.getSiteChannel()
                + "/" + locale.toString() + "/" + mediaObject : defaultImages[size || 'img-sm'];
        }
    }
})(angular);

(function (angular) {
    var CHARACTER_MAP = {
        '\u002E':   '',  //.
        '\u0020':   '-', //SPACE
        '\u002C':   '-', //,
        '\u0026':   '-', //&
        '\u005C':   '-', //\
        '\u201E':   '-', //„
        '\u0022':   '-', //'
        '\u0027':   '-', //'
        '\u00B4':   '-', //´
        '\u0060':   '-', //`
        '\u00BB':   '-', //»
        '\u00AB':   '-', //«
        '\u002F':   '-', ///
        '\u003A':   '-', //:
        '\u0021':   '-', //!
        '\u002A':   '-', //*
        '\u0028':   '-', //(
        '\u0029':   '-', //)
        '\u2122':   '-', //™
        '\u00AE':   '-', //®
        '\u00E1':   'a', //á
        '\u00F3':   'o', //ó
        '\u00ED':   'i', //í
        '\u00E9':   'e', //é
        '\u00E4':   'ae',//ä
        '\u00F6':   'oe',//ö
        '\u0151':   'o', //ő
        '\u00FC':   'u', //ü
        '\u00FA':   'u', //ú
        '\u0171':   'u', //ű
        '\u00DF':   'ss',//ß
        '\u00EE':   'i', //î
        '\u00E2':   'a', //â
        '\u0103':   'a', //ă
        '\u021B':   't', //ț
        '\u0163':   't', //ţ
        '\u015F':   't', //ş
        '\u0219':   's', //ș
        '\u0159':   'r', //ř
        '\u016f':   'u', //ů
        '\u00FD':   'y', //ý
        '\u010D':   'c', //č
        '\u011B':   'e', //ě
        '\u017E':   'z', //ž
        '\u0161':   's', //š
        '\u0165':   't', //ť
        '\u0148':   'n', //ň
        '\u2019':   '-', //’
        '\u00e0':   'a'  //à
    };
    var characterRegex = _
        .map(CHARACTER_MAP, function (val, key) {
            return '\\' + key;
        })
        .join('|');
    var regExp = new RegExp(characterRegex, 'g');

    angular
        .module('pds.common.filter')
        .filter('simplifyCharacters', ['_', function (_) {
            return function (val) {
                return val && val
                        .toLowerCase()
                        .replace(regExp, function (match) {
                            return CHARACTER_MAP[match];
                        });
            }
        }])

})(angular);

(function (angular) {
    angular
        .module('pds.common.directive')
        .directive('cliplister', CliplisterDirective);

    CliplisterDirective.$inject = ['$filter', '$sce'];

    function CliplisterDirective($filter, $sce) {
        return {
            restrict: 'E',
            template: '<div id="video" style="height:400px;"></div>',
            scope: {
                videoId: '=videoId'
            },
            link: function(scope, element, attrs) {
                new CliplisterControl.Viewer({
                    parentId: "video",
                    customer: 157893,
                    assets: [scope.videoId],
                    keyType: 10000,
                    fsk: 18,
                    autoplay: false,
                    plugins: {
                        InnerControls: {
                            layer: 2,
                            mobileDefaultControls: true,
                            id: "controls",
                            blacklist: ["share","quality","playback-speed"],
                            template: {
                                type: "external",
                                source: "https://mycliplister.com/static/viewer/assets/skins/default/controls.html"
                            }
                        },
                        ClickableVideo: {layer: 1},
                        PlayButton: {
                            id: "playButton",
                            layer: 7,
                            image: "https://mycliplister.com/static/viewer/assets/skins/default/playButton.png",
                            width: 100,
                            height: 100
                        },
                        PreviewImage: {layer: 6}
                    }
                });
            },
            replace: true
        }
    };

})(angular);

(function (angular) {
    'use strict';

    angular
        .module('pds.common.directive')
        .directive('httpSrc', HttpSrc)

    var defaultImages = {
        'img-bg_BG': '/src/media/img_Default_BG_1.jpg',
        'img-es_ES': '/src/media/img_Default_ES_1.jpg',
        'img-hu_HU': '/src/media/img_Default_HU_1.jpg',
        'img-ro_RO': '/src/media/img_Default_RO_1.jpg'
    };
    var defaultLang = 'bg_BG'

    HttpSrc.$inject = ['_', '$http', 'locale'];

    function HttpSrc(_, $http, locale) {
        return {
            scope: {
                httpSrc: '='
            },
            link: link,
            restrict: 'A'
        };

        function link(scope, element, attrs) {

            if (!scope.httpSrc) {
                return defaultImage();
            }

            $http.get(scope.httpSrc)
                .then(function(response) {
                    attrs.$set('src', scope.httpSrc)
                })
                .catch(defaultImage)

            element.bind('error', defaultImage);

            function defaultImage() {
                var image = defaultImages['img-'+locale.toString()] || defaultImages['img-'+defaultLang]
                attrs.$set('src', image);
            }

        }

    }
})(angular);

(function (angular) {
    angular
        .module('pds.common.directive')
        .directive('jsonld', JsonLdDirective);

    JsonLdDirective.$inject = ['$filter', '$sce'];

    function JsonLdDirective($filter, $sce) {
        return {
            restrict: 'E',
            template: '<script type="application/ld+json" ng-bind-html="onGetJson()"></script>',
            scope: {
                json: '=json'
            },
            link: function(scope, element, attrs) {
                scope.onGetJson = function() {
                    return $sce.trustAsHtml($filter('json')(scope.json));
                }
            },
            replace: true
        }
    };

})(angular);

(function (angular) {
    angular
        .module('pds.common.directive')
        .directive('simpleSubmenu', function () {
            return {
                restrict: 'EA',
                link: function (scope, element, attrs) {
                    // initNavCollapse(element);
                    //
                    // function initNavCollapse(submenus) {
                    //     var backLabel = window.cmsTranslations && window.cmsTranslations.MOBILE_NAVIGATION_BACK;
                    //
                    //     submenus
                    //         .append('<li class="dl-back"><a>' + backLabel + '</a></li>')
                    //         .end()
                    //         .on('click', '.js-open-submenu', function (e) {
                    //             if (Kit.bIsXs) {
                    //                 $(this).parent('li').addClass('is-open').parent('ul').addClass('nav-expanded').closest('li.is-open').addClass('trail');
                    //             }
                    //         })
                    //         .on('click', 'li.dl-back', function (e) {
                    //             if (Kit.bIsXs) {
                    //                 $(this).closest('li.is-open').removeClass('is-open').parent('ul.nav-expanded').removeClass('nav-expanded').parent('li.trail').removeClass('trail');
                    //             }
                    //         })
                    //         .on('hidden.bs.collapse', function (e) {
                    //             Kit.reset_navPrimary();
                    //         })
                    //         .on('click', 'li', function () {
                    //             var ocsNav = $('#ocs-nav').find('ul.nav');
                    //             ocsNav.addClass('hidden');
                    //             setTimeout(ocsNav.removeClass.bind(ocsNav, 'hidden'), 500);
                    //         });
                    // };
                }
            }
        })

})(angular);

(function(angular) {
    angular
        .module('pds.common.route')
        .config(RouteConfig);

    RouteConfig.$inject = ['$stateProvider', '$locationProvider', 'config'];

    function RouteConfig($stateProvider, $locationProvider, config) {
        $locationProvider.html5Mode(true);
        $stateProvider.pdsRoute = function (route) {
            route.url = urlPath(route.url);
            $stateProvider.state(route);
        };

        function urlPath(path) {
            return config.pdsPathPrefix + '/' + path;
        }

    }
})(angular);

(function (angular) {
    angular
        .module('pds.common.service')
        .service('SpinnerService', SpinnerService);

    SpinnerService.$inject = ['$http'];

    function SpinnerService($http) {
        var self = this;

        self.isLoading = function () {
            return $http.pendingRequests.length > 0;
        }

    }

})(angular);

(function (angular) {
    angular.module('pds.catalog.route', ['pds.common.route', 'ui.router', 'ncy-angular-breadcrumb']);
    angular.module('pds.catalog.service', ['pds.common.filter', 'pds.common.config']);
    angular.module('pds.catalog.config', ['pds.environment', 'ngResource', 'pds.common.config']);
    angular.module('pds.catalog.controller', ['ngSanitize', 'datatables', 'hl.sticky', 'dcbImgFallback', 'slickCarousel', 'pds.catalog.service', 'pds.catalog.directive', 'pds.navigation.service']);
    angular.module('pds.catalog.model', []);
    angular.module('pds.catalog.factory', ['pds.catalog.service']);
    angular.module('pds.catalog.directive', []);
    angular.module('pds.catalog', ['pds.catalog.controller', 'pds.catalog.route', 'pds.catalog.service', 'pds.catalog.config', 'pds.catalog.model']);
})(angular);

(function (angular) {
  angular.module('pds.navigation.route', ['ui.router']);
  angular.module('pds.navigation.service', ['pds.navigation.model', 'pds.common.service']);
  angular.module('pds.navigation.config', []);
  angular.module('pds.navigation.controller', ['pds.navigation.service', 'pds.common.service']);
  angular.module('pds.navigation.model', []);
  angular.module('pds.navigation.directive', []);
  angular.module('pds.navigation', ['pds.navigation.controller', 'pds.navigation.route', 'pds.navigation.service', 'pds.navigation.config', 'pds.navigation.model']);
})(angular);

(function (angular) {
  angular.module('pds.search.route', ['pds.common.route', 'ui.router']);
  angular.module('pds.search.service', ['pds.navigation.model', 'pds.common.config']);
  angular.module('pds.search.config', []);
  angular.module('pds.search.directive', ['pds.search.service', 'ui.bootstrap']);
  angular.module('pds.search.model', []);
  angular.module('pds.search', ['pds.search.directive', 'pds.search.route', 'pds.search.service', 'pds.search.config', 'pds.search.model']);
})(angular);

(function (angular) {
    angular
        .module('pds.catalog.config')
        .config(['$sceDelegateProvider', SceConfig]);

    function SceConfig($sceDelegateProvider) {
        $sceDelegateProvider.resourceUrlWhitelist([
            'self',
            'https://services.kittelberger.net/**',
            'https://dev02.sagiton.pl/**',
            'http://localhost:8080/**',
            'https://mycliplister.com/**'
        ]);
    }

})(angular);

(function (angular) {

    angular
        .module('pds.catalog.controller')
        .controller("CatalogController", CatalogController);

    CatalogController.$inject = ['$scope', '$rootScope', 'urlParserService', '_', 'metaService', 'CatalogService'];

    function CatalogController($scope, $rootScope, urlParserService, _, metaService, CatalogService) {
        var vm = this;

        vm.catalogId = urlParserService.getCatalogId();

        vm.isArray = _.isArray;

        metaService.updateMetaByCategory(vm.catalogId);
        $rootScope.$broadcast('pds.breadcrumb.update', {catalogId: vm.catalogId});

        $scope.$on('pds.catalog.loaded', function (event, params) {
            return initCatalog(params.catalog);
        });

        $scope.$on('pds.catalog.loaded', function () {
            angular
                .element('#nav-primary-collapse')
                .find('li')
                .removeClass('active');
            angular
                .element('#ocs-nav')
                .addClass('active');
        });

        function initCatalog(catalog) {
            vm.catalog = catalog;

            if (_.get(vm.catalog, 'redirectCategory.id')) {
                return CatalogService.redirectTo(vm.catalog.redirectCategory.id);
            }

            vm.catalog.energyEfficiency = vm.catalog.energyEfficiency || {};
            return catalog
        }
    }

})(angular);

(function (angular) {
    var VALUE_TEMPLATE = '<span>{{(value || {}).value == null ? \'-\' : value.value}}</span>';
    var IMAGE_MEDIA_TEMPLATE = '<img ng-src="{{value.value}}" alt="{{alt.value}}" title="{{title.value}}"/>';
    var OTHER_MEDIA_TEMPLATE = '<span><a ng-href="{{value.value | imageUrl}}" title="{{title.value}}" target="_blank"><span translate="DOWNLOAD.NOW"></span>&nbsp;<i class="glyphicon glyphicon-download-alt"></i></a></span>';
    var LIST_TEMPLATE = '<span ng-repeat="el in value.value">{{el + (!$last ? ", ": "")}}</span>';
    var IMAGE_EXTENSIONS = ['.jpg', '.png', '.jpeg', '.gif'];
    var DOT = '.';

    var templateStrategy = [
        {
            isApplicable: function (val, type) {
                return type && type.toLowerCase() == 'string' && IMAGE_EXTENSIONS.indexOf(val.slice(val.lastIndexOf(DOT))) >= 0;
            },
            template: IMAGE_MEDIA_TEMPLATE
        },
        {
            isApplicable: function (val, type) {
                return type && type.toLowerCase() == 'asset';
            },
            template: OTHER_MEDIA_TEMPLATE
        },
        {
            isApplicable: function (val, type) {
                return type && type.toLowerCase() == 'list';
            },
            template: LIST_TEMPLATE
        },
        {
            isApplicable: function () {
                return true;
            },
            template: VALUE_TEMPLATE
        }
    ];

    angular
        .module('pds.catalog.directive')
        .directive('attributeValue', ['$compile', '$sce', function ($compile, $sce) {
            return {
                restrict: 'EA',
                scope: {
                    value: '=attributeValue',
                    alt: "=attributeAlt",
                    title: "=attributeTitle"
                },
                link: function (scope, element, attrs, ctrl) {
                    scope.$sce = $sce;
                    for (var i = 0; i < templateStrategy.length; i++) {
                        if (scope.value && templateStrategy[i].isApplicable(scope.value.value, scope.value.type)) {
                            return element.html($compile(templateStrategy[i].template)(scope));
                        }
                    }
                }
            }
        }]);

})(angular);

(function (angular, $) {
    angular
        .module('pds.catalog.directive')
        .directive('catalogMetadata', CatalogMetadata);

    function CatalogMetadata() {
        return {
            restrict: 'EA',
            controller: CatalogMetadataController,
            scope: {
                data: '=data'
            }
        }
    }

    CatalogMetadataController.$inject = ['_', '$scope', 'CatalogService'];

    function CatalogMetadataController(_, $scope, CatalogService) {

        var redirectCategoryId = _.get($scope.data, 'redirect.id')
        if (redirectCategoryId) {
            return CatalogService.redirectTo(redirectCategoryId)
        }

        var canonicalReference = _.get($scope.data, 'canonicalReference')
        if (canonicalReference) {
            angular.element('head')
                .find('link[rel=canonical]')
                .attr({'href': canonicalReference})
                .attr({'ng-href': canonicalReference})
        }

    }

})(angular, $);

(function (angular) {
    angular
        .module('pds.catalog.directive')
        .directive('catalogTemplate', ['CatalogService', '$rootScope', '_' ,function (CatalogService, $rootScope, _) {
            return {
                restrict: 'EA',
                scope: {
                    catalogId: '='
                },
                transclude: true,
                template: '<div class="catalog-template" ng-transclude></div>',
                link: function (scope, element, attrs, ctrl) {
                    scope.$watch('catalogId', function (val) {
                        val && CatalogService
                            .getCatalogTemplate(val)
                            .then(function (catalog) {
                                scope.$catalog = catalog;
                                $rootScope.$broadcast('pds.catalog.loaded', {catalog: catalog});
                            });
                    });
                }
            }
        }]);

})(angular);

(function (angular, $) {
    angular
        .module('pds.catalog.directive')
        .directive('equalizeTeaserHeight', ['$timeout', EqualizeTeaserHeight]);

    function EqualizeTeaserHeight($timeout) {
        return {
            restrict: 'EA',
            controller: ['$scope', '$element', '$attrs', function (scope, element, attrs) {
                if (scope.$last) {
                    $timeout(function() {
                        var maxHeight = 0;
                        var cardBlock = $(".card .card-block");

                        $(cardBlock).each(function() {
                            if ($(this).height() > maxHeight) {
                                maxHeight = $(this).height();
                            }
                        });

                        $(cardBlock).height(maxHeight);
                    }, 0);
                }
            }]
        }
    }

})(angular, jQuery);

(function (angular, $) {
    angular
        .module('pds.catalog.directive')
        .directive('fullWidthTable', FullWidthTable);

    FullWidthTable.$inject = [];

    function FullWidthTable() {
        return {
            restrict: 'EA',
            link: link
        }
    }

    function link(scope, element, attrs) {

        var viewportWidth = $(window).width();
        var tableSliderElements = element.find(".slick-track .card");
        var tableSliderElementsAmount = $(tableSliderElements).length;

        //desktop
        if (viewportWidth > 991) {
            if (tableSliderElementsAmount < 3) {
                element.addClass("js-full-width-slick-track");
            } else {
                element.removeClass("js-full-width-slick-track");
            }
        }

        //tablet
        if ((viewportWidth < 992) && (viewportWidth > 767)) {
            if (tableSliderElementsAmount < 2) {
                element.addClass("js-full-width-slick-track");
            } else {
                element.removeClass("js-full-width-slick-track");
            }
        }

    }

})(angular, $);

(function (angular) {
    angular
        .module('pds.catalog.directive')
        .directive('ocsBreadcrumb', OcsBreadcrumb);

    var crumbTemplate = "<li ng-repeat=\"crumb in $breadcrumbs\" ng-class=\"{'active ocs-breadcrumb-last': $last}\">"
            + "<a ocs-navigate=\"crumb.id\">{{crumb.name}}</a>"
        + "</li>";

    function OcsBreadcrumb() {
        return {
            restrict: 'EA',
            scope: {
                ocsNavigate: '='
            },
            controller: BreadcrumbController
        }
    }

    BreadcrumbController.$inject = ['$scope', '$compile', 'BreadcrumbService', '_']

    function BreadcrumbController($scope, $compile, BreadcrumbService, _) {
        $scope.$on('pds.breadcrumb.update', function (event, params) {
            BreadcrumbService
                .build(params.catalogId)
                .then(function (res) {
                    $scope.$breadcrumbs = res || {};
                    var breadcrumbs = $compile(crumbTemplate)($scope);
                    var breadcrumbsContainer = angular.element('#nav-breadcrumbs');
                    breadcrumbsContainer.find('.dropdown-menu').append(breadcrumbs);

                    //TODO Move this stuff, but where.......................................................................
                    if (_.last($scope.$breadcrumbs).type == 'PRODUCT_FAMILY') {
                        breadcrumbsContainer.addClass('dark-breadcrumb');
                    }

                    breadcrumbsContainer
                        .find('.dropdown-toggle')
                        .text(_.last($scope.$breadcrumbs).name);
                });
        });
    }

})(angular);

(function (angular) {
    angular
        .module('pds.catalog.directive')
        .directive('ocsDataTable', OcsDataTable);

    OcsDataTable.$inject = ['$timeout', '_'];


    function OcsDataTable($timeout, _) {
        return {
            restrict: 'EA',
            scope: {
                ocsDataTable: '=',
                odtResponsiveChange: '&'
            },
            link: function (scope, element, attrs) {
                scope.$watch('ocsDataTable', function (val) {
                    $timeout(function () {
                        element.DataTable();
                        element.off('responsive-resize.dt');
                        element.on('responsive-resize.dt', function (e, table, cols) {
                            scope.$apply(function () {
                                scope.odtResponsiveChange({$event: e, $table: table, $columns: cols});
                            })
                        });
                    });
                });
            }
        }
    }

})(angular);

(function (angular) {
    angular
        .module('pds.catalog.directive')
        .directive('ocsNavigate', OcsNavigateDirective);

    OcsNavigateDirective.$inject = ['CatalogService'];

    function OcsNavigateDirective(CatalogService) {
        return {
            restrict: 'EA',
            scope: {
                ocsNavigate: '='
            },
            controller: ['$scope', '$element', '$attrs', function (scope, element, attrs) {
                scope.$watch('ocsNavigate', function (val) {
                    val && CatalogService
                        .resolveUriFromHierarchy(val)
                        .then(function (uri) {
                            element.attr('href', uri);
                        });
                    element.filter(function (idx, el) {
                        return !$(el).attr('target');
                    })
                    .attr('target', '_self');
                })
            }]
        }
    }

})(angular);

(function (angular) {
    angular
        .module('pds.catalog.directive')
        .directive('ocsNavigationMenu', OcsNavigationMenu);

    OcsNavigationMenu.$inject = ['config', '$templateCache']

    function OcsNavigationMenu(config, $templateCache) {
        return {
            restrict: 'A',
            scope: true,
            template:  function() {
                return $templateCache.get('component/navigation_menu.html')
            },
            controller: NavigationMenuController,
            controllerAs: '$ctrl'
        }
    }

    NavigationMenuController.$inject = ['MenuService', '$element']

    function NavigationMenuController(MenuService, $element) {
        var self = this;

        self.menu = self.menu || {
            name: $element.children('a').text()
        };

        MenuService
            .getMenu()
            .then(function(menu) {
                self.menu = menu;
            });

    }
})(angular);

(function (angular) {
    angular
        .module('pds.catalog.directive')
        .component('ocsNewProducts', {
            template:  ['$templateCache', function($templateCache) {
                return $templateCache.get('component/new_products.html')
            }],
            controller: NewProductsController
        });

    NewProductsController.$inject = ['CatalogService']

    function NewProductsController(CatalogService) {
        var self = this;

        self.slickSettings = {
            "arrows": false,
            "dots": true,
            "infinite": false,
            "speed": 1000,
            "cssEase": "ease-in-out",
            "slidesToShow": 4,
            "slidesToScroll": 4,
            "responsive": [
                {
                    "breakpoint": 992,
                    "settings": {
                        "slidesToShow": 2,
                        "slidesToScroll": 2
                    }
                },
                {
                    "breakpoint": 768,
                    "settings": {
                        "slidesToShow": 1,
                        "slidesToScroll": 1
                    }
                }
            ]
        };

        CatalogService
            .getNewProducts()
            .then(function (data) {
                self.products = data.products
                self.productsLoaded = true;
            });
    }
})(angular);

(function (angular) {
    angular
        .module('pds.catalog.directive')
        .directive('scrollableTableCard', function() {
            return {
                restrict: 'EA',
                controller: ScrollableTableCardController
            }
        });

    ScrollableTableCardController.$inject = ['$scope', '$element', '$attrs'];

    function ScrollableTableCardController(scope, element, attrs) {

        var $thisTable = $(this);
        var viewportWidth = $(window).width();
        var tableSliderElements = $thisTable.find(".card");
        var tableSliderElementsAmount = $(tableSliderElements).length;

        function setProperColumnQuantity() {
            element.each(function() {
                //desktop
                if (viewportWidth > 991) { //FIXME
                    if (tableSliderElementsAmount < 3) {
                        $thisTable.addClass("js-full-width-slick-track");
                    } else {
                        $thisTable.removeClass("js-full-width-slick-track");
                    }
                }

                //tablet
                if ((viewportWidth < 992) && (viewportWidth > 767)) { //FIXME
                    if (tableSliderElementsAmount < 2) {
                        $thisTable.addClass("js-full-width-slick-track");
                    } else {
                        $thisTable.removeClass("js-full-width-slick-track");
                    }
                }

            });
        }
        setProperColumnQuantity()
        $(window).on("resize orientationchange", setProperColumnQuantity)
    }

})(angular);

(function (angular) {
    angular
        .module('pds.catalog.directive')
        .directive('sectionTechnicalDataTable', SectionTechnicalDataTable);

    function SectionTechnicalDataTable() {
        return {
            restrict: 'EA',
            controller: SectionTechnicalDataTableController,
            scope: {},
            bindToController: {
                $section: '=sectionTechnicalDataTable'
            },
            controllerAs: '$ctrl',
        }
    }

    SectionTechnicalDataTableController.$inject = ['_', '$timeout', '$element']

    function SectionTechnicalDataTableController(_, $timeout, $element) {
        var self = this

        var PRODUCT_COUNT_LAYOUT_BREAKPOINT = 4
        self.$section = self.$section || {}

        self.responsiveChange = responsiveChange
        self.doDisplaySection = doDisplaySection

        $timeout(initSection)

        function initSection() {
            self.$section.tableDefinition = _
                .chain(self.$section.tableDefinition)
                .filter(function(attr) {
                    return anyProductHasValue(self.$section.products, attr);
                })
                .filter(isNotHeaderAttribute.bind(this, self.$section.products))
                .value();

            if(!doDisplaySection()) {
                $element.remove()
                return
            }

            responsiveChange();
        }

        function doDisplaySection() {
            var section = self.$section
            return section
                && !_.isEmpty(section.tableDefinition)
                && !_.isEmpty(section.products)
        }

        function responsiveChange(e, table, columns) {
            self.$section.partitions = _.chunk(self.$section.products, _.every(columns) ? PRODUCT_COUNT_LAYOUT_BREAKPOINT : Number.POSITIVE_INFINITY);
        }

        function isNotHeaderAttribute(products, attr) {
            return !isHeaderAttribute(products, attr);
        }

        function isHeaderAttribute(products, attr) {
            return _.some(products, function (product) {
                return product.header && product.header.key == attr.key;
            });
        }

        function anyProductHasValue(products, attribute) {
            return _.some(products, attribute.key);
        }

        function tableDefinitionContains(definition, key) {
            return _.some(definition, {key: key});
        }

    }

})(angular);

(function (angular) {
    angular
        .module('pds.catalog.directive')
        .directive('navLang', function() {
            return {
                restrict: 'EA',
                controller: SwitchLanguageController
            }
        });

    SwitchLanguageController.$inject = ['$element', 'urlParserService', 'CatalogService', 'locale', '$window', 'metaTag']

    function SwitchLanguageController(element, urlParserService, catalogService, locale, $window, metaTag) {
        if (!urlParserService.isOCS()) {
            return
        }

        element
            .children('li')
            .each(function (index, el) {
                var link = angular.element(el).children('a');
                link.click(changeLanguage.bind(link));
            });

        function changeLanguage (event) {
            event.preventDefault();

            var $span = this.children('span')

            var language = $span.text().toLowerCase();
            var newLocale = locale.toString().replace(locale.language, language);
            var ocsChannel = angular.element($span).attr('ocs-channel') || metaTag.getSiteChannel()

            catalogService
                .resolveUriFromHierarchy(catalogService.getIdFromLocation(), newLocale, ocsChannel)
                .then(function (uri) {
                    $window.location.href = urlParserService.setLanguage(uri, language);
                });
        }

    }

})(angular);

(function (angular) {
    angular
        .module('pds.catalog.directive')
        .directive('synchronizeHeight', SynchronizeHeight);

    SynchronizeHeight.$inject = ['$timeout', '$window'];

    function SynchronizeHeight($timeout, $window) {
        return {
            restrict: 'EA',
            link: function (scope, element, attrs) {
                $timeout(function() {
                    var firstColumnRow = angular
                        .element(document)
                        .find('.card.card-column table tr')
                        .eq(scope.$index + 1)

                    scope.$watchCollection(function () {
                        return {
                            headerCellHeight: firstColumnRow[0].offsetHeight,
                            thisCellHeight: element[0].offsetHeight
                        }
                    }, synchronizeRowHeight, true)

                    function synchronizeRowHeight(newVals) {
                        var maxHeight = newVals.headerCellHeight > newVals.thisCellHeight ? newVals.headerCellHeight : newVals.thisCellHeight
                        element.height(maxHeight)
                        firstColumnRow.height(maxHeight)
                    }
                }, 500)

                angular.element($window).bind('resize', function () {
                    scope.$apply();
                });

            }
        }
    }

})(angular);

(function (angular) {

    angular
        .module('pds.catalog.factory')
        .factory('urlBuilder', UrlBuilder);

    UrlBuilder.$inject = ['$injector'];

    function UrlBuilder($injector) {
        return $injector.get('seoFriendlyUrlBuilder');
    }
})(angular);

(function(angular) {
    angular
        .module('pds.catalog.model')
        .config(CatalogConfig);

    CatalogConfig.$inject = ['env', 'CatalogProvider'];

    function CatalogConfig(env, catalogModelProvider) {
        catalogModelProvider
            .productDataServiceEndPoint(env.endPoint.productDataService)
            .contentServiceEndPoint(env.endPoint.contentService);
    }

})(angular);

(function (angular) {
    angular
        .module('pds.catalog.model')
        .provider('Catalog', function CatalogProvider() {
            var pdsUrl = null;
            var csUrl = null;

            this.productDataServiceEndPoint = function (value) {
                pdsUrl = value;
                return this;
            };

            this.contentServiceEndPoint = function (value) {
                csUrl = value;
                return this;
            };

            this.$get = ['$resource', '$cacheFactory', 'locale', '$http', '_', function ($resource, $cacheFactory, locale, $http, _) {
                return new Catalog($resource, $cacheFactory, locale, pdsUrl, csUrl, $http, _);
            }];
        });

    function Catalog($resource, $cacheFactory, locale, pdsUrl, csUrl, $http, _) {
        var catalogCache = $cacheFactory("catalog");
        var customTransformations = [redirectChildren];
        var transformations = $http.defaults.transformResponse.concat(customTransformations);
        var transformResponse = function (data, headers, status) {
            var result = data;
            _.each(transformations, function (t) {
                result = t(result, headers, status);
            });
            return result;
        };
        var CatalogResource = $resource(pdsUrl + 'hierarchy/:channel/:locale/:type/:id', null, {
                get: {
                    method: 'GET',
                    params: {locale: locale},
                    cache: catalogCache,
                    transformResponse: transformResponse
                },
                query: {
                    method: 'GET',
                    isArray: true,
                    params: {locale: locale},
                    cache: catalogCache
                },
                template: {
                    method: 'POST',
                    url: csUrl + 'rest/document/display',
                    transformResponse: transformResponse
                }
            }
        );

        function redirectChildren(data, headers, status) {
            if(data && _.isArray(data.children)) {
                data.children = _.map(data.children, function (child) {
                    return child.redirectCategory ? child.redirectCategory : child;
                });
            }
            return data;
        }

        CatalogResource.prototype.isLeafCatalog = function () {
            return this.getType() === 'leaf_category';
        };

        CatalogResource.prototype.isProductFamily = function () {
            return this.getType() === 'product_family';
        };

        CatalogResource.prototype.isSubCatalog = function () {
            return this.getType() === 'sub_category';
        };

        CatalogResource.prototype.isRootCatalog = function () {
            return this.getType() === 'root_category';
        };

        CatalogResource.prototype.getType = function() {
            return this.type ? this.type.toLowerCase() : String();
        };

        CatalogResource.fallbackType = function () {
            return 'PRODUCT_FAMILY';
        };

        return CatalogResource;
    }

})(angular);

(function(angular) {
    angular
        .module('pds.catalog.route')
        .config(RouteConfig);

    RouteConfig.$inject = ['$stateProvider'];

    function RouteConfig($stateProvider) {
        $stateProvider.pdsRoute({
            name: 'catalog',
            url: '{catUrl:.*-[cp][/]?}',
            templateProvider: ['$templateCache', function($templateCache){
                return $templateCache.get('catalog3.html')
            }],
            controller: 'CatalogController as vm',
            resolve: {
                redirect: ['metaService', function (metaService) {
                    return metaService.redirectOnInvalidUrl();
                }]
            }
        });
    }
})(angular);

(function(angular) {
    angular
        .module("pds.catalog.service")
        .service("BreadcrumbService", BreadcrumbService);

    BreadcrumbService.$inject = ['CatalogService', '_', '$q'];

    function BreadcrumbService(CatalogService, _, $q) {
        var templatePromise

        return {
            build: build
        };

        function build(categoryId) {
            templatePromise = templatePromise || CatalogService.getTemplate(categoryId, 'BREADCRUMBS')

            return templatePromise
                .then(decorateWithUrls)
                .then(function (tree) {
                    return _.map(tree, function (node) {
                        return _.pick(node, 'id', 'name', 'url', 'type')
                    })
                });
        }

        function decorateWithUrls(response) {
            var tree = response.nodes
            var promises = _.map(tree, function (node) {
                return CatalogService
                    .resolveUriFromHierarchy(node.id)
                    .then(function (url) {
                        node.url = url;
                        return node
                    });
            })
            return $q.all(promises)
        }
    }

})(angular);

(function (angular) {
    angular
        .module("pds.catalog.service")
        .service("CatalogService", CatalogService);

    CatalogService.$inject = ['$window', 'Catalog', 'MenuService', 'catalogUrlSchema', 'catalogSearchListener', '_', '$q', 'locale', 'metaTag'];

    function CatalogService($window, Catalog, menuService, catalogUrlSchema, catalogSearchListener, _, $q, locale, metaTag) {
        var catalogTemplate;

        catalogSearchListener
            .listen()
            .then(function (params) {
                return resolveUriFromHierarchy(params.target.resourceId, null, params.consumer);
            })
            .then(function (uri) {
                $window.location.href = uri;
            });

        return {
            getNewProducts: getNewProducts,
            getCatalogTemplate: getCatalogTemplate,
            getTemplate: getTemplate,
            redirectTo: redirectTo,
            travelUpNavigationHierarchy: travelUpNavigationHierarchy,
            getIdFromLocation: getIdFromLocation,
            resolveUriFromHierarchy: resolveUriFromHierarchy,
        };

        function getNewProducts() {
            var catalog = new Catalog({
                template: {name: 'NEW_PRODUCTS'},
                model: {
                    locale: locale.toString(),
                    channel: metaTag.getSiteChannel()
                }
            });
            return catalog.$template();
        }

        function getCatalogTemplate(catalogId) {
            catalogTemplate = catalogTemplate || getTemplate(catalogId)
            return catalogTemplate
        }

        function getTemplate(catalogId, type) {
            return getCatalogFromHierarchy(catalogId)
                .then(function (catalog) {
                    catalog.template = {
                        name: type || catalog.type
                    }
                    catalog.model = {
                        locale: locale.toString(),
                        channel: metaTag.getSiteChannel(),
                        catalogRequest: {
                            id: catalogId,
                            channel: metaTag.getSiteChannel(),
                            type: catalog.type
                        }
                    }
                    return catalog.$template();
                });
        }

        function redirectTo(id) {
            return resolveUri(id)
                .then(function (uri) {
                    $window.location.href = uri;
                });
        }

        function travelUpNavigationHierarchy(categoryId, locale) {
            return menuService
                .findInNavigation(categoryId, locale)
                .then(function (catalog) {
                    var catalogs = [];
                    while (catalog !== null) {
                        catalogs.push(catalog);
                        catalog = menuService.findParentInNavigation(catalog.id, locale);
                    }
                    return $q.all(catalogs);
                });
        }

        function getIdFromLocation(uri) {
            uri = uri || new URI().toString();
            var parts = uri.split('-');
            return parts[parts.length - 2];
        }

        function resolveUriFromHierarchy(categoryId, locale, channel) {
            return travelUpNavigationHierarchy(categoryId, locale)
                .then(function (catalogs) {
                    return catalogUrlSchema.build(catalogs, channel)
                });
        }

        function getById(categoryId) {
            return getCatalogFromHierarchy(categoryId)
                .then(function (catalog) {
                    catalog.channel = metaTag.getSiteChannel()
                    return catalog.get().$promise;
                });
        }

        function travelUpHierarchy(categoryId) {
            return getById(categoryId)
                .then(function (catalog) {
                    var catalogs = [];
                    while (catalog !== null) {
                        catalogs.push(catalog);
                        catalog = getById(catalog.parentId, locale);
                    }
                    return $q.all(catalogs);
                });
        }

        function resolveUri(categoryId) {
            return travelUpHierarchy(categoryId)
                .then(catalogUrlSchema.build);
        }


        function getCatalogFromHierarchy(id) {
            return menuService
                .findInNavigation(id)
                .then(function (catalog) {
                    var params = !catalog ? null : {
                        id: catalog.id,
                        type: catalog.type,
                        channel: metaTag.getSiteChannel()
                    }
                    return new Catalog(params)
                });
        }

    }

})(angular);

(function (angular) {
    angular
        .module('pds.catalog.service')
        .service('catalogUrlSchema', CatalogUrlSchema);

    CatalogUrlSchema.$inject = ['SeoFriendlyUrlBuilder', 'metaTag', '_'];

    function CatalogUrlSchema(SeoFriendlyUrlBuilder, metaTag, _) {
        var productPrefix = 'p';
        var categoryPrefix = 'c';

        var schemas = {
            'comercial-e-industrial': industrialSchema, //TODO Make this locale independent
            'gewerbe-industrie': industrialSchema,
            'commercial-industrial': industrialSchema
        };

        this.build = function (catalogs) {
            if (!_.size(catalogs)) {
                return String();
            }
            return getSchema(metaTag.getSiteChannel())(catalogs);
        };

        function getSchema(name) {
            return schemas[name] || residentialSchema;
        }

        function industrialSchema(catalogs) {
            var builder = new SeoFriendlyUrlBuilder({ocsBasePath: metaTag.getSiteChannel() + '/ocs'});
            _.forEachRight(catalogs, function (catalog, index) {
                var fragments = [catalog.name];
                if (index === 0) {
                    fragments.push(catalog.id, categoryPrefix);
                }
                builder.addPath(fragments);

                if (catalog.isProductFamily()) {
                    builder.setPath([catalog.name, catalog.id, productPrefix]);
                }
            });
            return builder.build();
        }

        function residentialSchema(catalogs) {
            var builder = new SeoFriendlyUrlBuilder();
            _.forEachRight(catalogs, function (catalog, index) {
                var fragments = [catalog.name];
                if (index === 0) {
                    fragments.push(catalog.id, categoryPrefix);
                }
                if (index === catalogs.length - 1) {
                    fragments.unshift(metaTag.getSiteChannel());
                }
                builder.addPath(fragments);

                if (catalog.isProductFamily()) {
                    builder.setPath([catalog.name, catalog.id, productPrefix]);
                }
            });
            return builder.build();
        }
    }


})(angular);

(function (angular) {
    angular
        .module('pds.catalog.service')
        .service('metaService', MetaService);

    MetaService.$inject = ['$rootScope', '$q', '$location', '$window', 'CatalogService', 'imageUrlFilter', 'config', 'urlParserService'];

    var TITLE_DELIMITER = ' | ';
    var LOCALE_DELIMITER = '-';
    var LOCALE_PROPER_DELIMITER = '_';
    var PATH_SEPARATOR = '/';

    function MetaService($rootScope, $q, $location, $window, CatalogService, imageUrlFilter, config, urlParserService) {

        return {
            updateMetaByCategory: updateMetaByCategory,
            redirectOnInvalidUrl: redirectOnInvalidUrl
        };

        function updateMetaByCategory(catalogId) {
            var excludeHreflangs = false;
            CatalogService
                .getCatalogTemplate(catalogId)
                .then(function (currentCatalog) {
                    return CatalogService
                        .travelUpNavigationHierarchy(catalogId)
                        .then(function (tree) {
                            tree[0] = currentCatalog;
                            return tree;
                        });
                })
                .then(function (tree) {
                    var q = $q.defer();
                    var currentNode = tree[0];
                    tree[0].name = tree[0].name.value;
                    var headerTitle = [];

                    for (var i = 0; i < tree.length; i++) {
                        if (tree[i] && tree[i].name) {
                            headerTitle.push(tree[i].name);
                        }
                    }
                    headerTitle.push(config.metaTags.siteName);

                    var image = (currentNode.keyVisual || currentNode.productimage || {}).value;
                    var event = {
                        title: headerTitle.join(TITLE_DELIMITER),
                        description: (currentNode.seoMetaText || currentNode.descriptionLong || currentNode.descriptionShort || {}).value,
                        image: image ? imageUrlFilter(image) : undefined,
                        siteName: config.metaTags.siteName,
                        webTrends: {
                            cg_s: tree[0] ? tree[0].name : null,
                            z_cg3: tree[1] ? tree[1].name : null,
                            z_cg4: tree[2] ? tree[2].name : null
                        },
                        canonicalUrl: $location.absUrl()
                    };

                    if (!(currentNode.blockCanonicalTag || {}).value) {
                        var canonicalRef = (currentNode.canonicalRef || {}).value;
                        if(canonicalRef) {
                            excludeHreflangs = canonicalRef != catalogId;
                            CatalogService
                                .resolveUriFromHierarchy(canonicalRef)
                                .then(function (url) {
                                    event.canonicalUrl = url;
                                    q.resolve(event);
                                });
                        } else {
                            q.resolve(event);
                        }
                    }

                    return q.promise;
                })
                .then(function (params) {
                    $rootScope.$broadcast('pds.header.update', params);
                })
                .then(function () {
                    if (excludeHreflangs) {
                        angular.element('link[hreflang]').remove();
                        return false;
                    }
                    angular
                        .element('link[hreflang]')
                        .each(function (index, link) {
                            var linkObject = angular.element(link);
                            var locale = linkObject.attr('hreflang');
                            locale = locale.split(LOCALE_DELIMITER);
                            CatalogService
                                .resolveUriFromHierarchy(catalogId, locale[0] + LOCALE_PROPER_DELIMITER + locale[1])
                                .then(function (url) {
                                    linkObject.attr('href', url.replace(/\/[a-z]{2}\/[a-z]{2}\//, PATH_SEPARATOR + locale[1].toLowerCase() + PATH_SEPARATOR + locale[0].toLowerCase()  + PATH_SEPARATOR));
                                    return !!url;
                                })
                                .then(function (result) {
                                    return result || linkObject.remove();
                                });
                        });
                });
        }

        function redirectOnInvalidUrl() {
            return CatalogService
                .resolveUriFromHierarchy(urlParserService.getCatalogId())
                .then(function (url) {
                    if (encodeURI(url) != URI().toString()) {
                        $window.location.href = url;
                    }
                })
        }
    }
})(angular);

(function (angular) {
    angular
        .module('pds.catalog.service')
        .service('catalogSearchListener', CatalogSearchListener);

    CatalogSearchListener.$inject = ['$rootScope', '$q', 'env'];

    function CatalogSearchListener($root, $q, env) {
        this.listen = function () {
            var def = $q.defer();
            $root.$on('pds.search.navigate', function (event, params) {
                if (params.target.channelDiscriminator == env.search.pdsChannelDiscriminator || params.target.resourceId) {
                    def.resolve(params);
                }
            });
            return def.promise;
        }
    }
})(angular);

(function (angular, URI) {
    angular
        .module('pds.catalog.service')
        .factory('SeoFriendlyUrlBuilder', SeoFriendlyUrlBuilderFactory);

    SeoFriendlyUrlBuilderFactory.$inject = ['$window', '_', 'simplifyCharactersFilter'];

    var fragmentSeparator = '-';
    var pathSeparator = '/';
    var ocsBasePath = 'ocs';

    function SeoFriendlyUrlBuilderFactory($window, _, simplifyCharactersFilter) {
        function SeoFriendlyUrlBuilder(options) {
            options = options || {};
            this.ocsBasePath = options.ocsBasePath || ocsBasePath;
            this.path = this.buildBasePath();
            this.simplifyCharactersFilter = simplifyCharactersFilter;
        }

        SeoFriendlyUrlBuilder.prototype.addPath = function(fragments) {
            if (!fragments) {
                return this;
            }
            var args = _.compact([].concat(fragments));
            this.path += pathSeparator + this.simplifyCharactersFilter(args.join(fragmentSeparator));
            return this;
        };

        SeoFriendlyUrlBuilder.prototype.setPath = function (fragments) {
            this.path = this.buildBasePath();
            this.addPath(fragments);
            return this;
        };

        SeoFriendlyUrlBuilder.prototype.build = function () {
            return this.path;
        };

        SeoFriendlyUrlBuilder.prototype.buildBasePath = function() {
            return URI().origin() + $window.getBasePath() + pathSeparator + this.ocsBasePath;
        };

        return SeoFriendlyUrlBuilder;
    }


})(angular, URI);

(function (angular) {

    angular
        .module('pds.catalog.service')
        .service('urlParserService', UrlParser);

    UrlParser.$inject = ['config'];

    var countryMatchIndex = 1;
    var languageMatchIndex = 2;
    var rootSegmentMatchIndex = 3;
    var catalogIdMatchIndex = 4;

                      /**  {1}{2}   {3}                                    {4}    **/
                      /** /ch/de/residential.html/qwe/asd/qwe/asd/poiuuy-134233-c **/
    var pathPattern = /^\/([a-z]{2})\/([a-z]{2})\/(?:ocs\/)?([^\/]*)(?:\.html)?\/(?:.*-([0-9]*)-[pc]\/?$)?/i;
    var languagePattern = /(\/[a-z]{2}\/)([a-z]{2})(.*)/i;

    function UrlParser(config) {
        this.config = config;
    }

    UrlParser.prototype.isOCS = function() {
        return !!this.getCatalogId();
    };

    UrlParser.prototype.getRootSegment = function getRootSegment() {
        return matchForIndex(rootSegmentMatchIndex) || this.config.metaTags.siteName;
    };

    UrlParser.prototype.getCatalogId = function () {
        return matchForIndex(catalogIdMatchIndex);
    };

    UrlParser.prototype.getLanguage = function () {
        return matchForIndex(languageMatchIndex);
    };

    UrlParser.prototype.setLanguage = function (url, language) {
        var uri = new URI(url);
        uri.path(uri.path().replace(languagePattern, '$1' + language + '$3'));
        return uri.toString();
    };

    function matchForIndex(index) {
        var match = new URI().path().match(pathPattern);
        return match && match[index];
    }

})(angular);

(function(angular) {
    angular
        .module('pds.navigation.model')
        .config(NavigationConfig);

    NavigationConfig.$inject = ['env', 'NavigationProvider'];

    function NavigationConfig(env, NavigationProvider) {
        NavigationProvider.navigationEndpoint(env.endPoint.contentService);
    }

})(angular);

(function (angular) {
    angular
        .module('pds.navigation.model')
        .provider('Navigation', function () {
            var url = null;

            this.navigationEndpoint = function (value) {
                url = value;
                return this;
            };

            this.$get = ['$resource', '$cacheFactory', function ($resource, $cacheFactory) {
                return new Navigation($resource, $cacheFactory, url);
            }]
        });

    function Navigation($resource, $cacheFactory, url) {
        var catalogCache = $cacheFactory("navigation");
        var methods = {
            get: {method: 'GET', cache: catalogCache}
        };
        return $resource(url + 'rest/document/display', null, methods);
    }
})(angular);

(function(angular) {
	angular
		.module("pds.navigation.service")
		.service("MenuService", MenuService);

	MenuService.$inject = ['_', 'Navigation', 'locale', 'Catalog', 'metaTag'];

	function MenuService(_, Navigation, locale, Catalog, metaTag) {
        var NAVIGATION_TEMPLATE_NAME = 'CATALOG_HIERARCHY';
        var self = this;
        self.currentLocale = locale.toString();
        self.flatNavigation = {};
        self.getMenu = getMenu;
        self.findInNavigation = findInNavigation;
        self.findParentInNavigation = findParentInNavigation;

		function getMenu(locale) {
            var properLocale = locale || self.currentLocale;
            var nav = new Navigation({
                template: {
                    name: NAVIGATION_TEMPLATE_NAME,
                    channel: metaTag.getSiteChannel()
                },
                model: {
                    locale: properLocale,
                    channel: metaTag.getSiteChannel()
                }
            });
			return Navigation
                .get({query: nav})
                .$promise
				.then(function (res) {
                    if(!res.root) {
                        return {};
                    }
                    res.root.children[0].maxNavigationItems = res.root.maxNavigationItems;
                    return res.root.children[0];
				})
		}

		function getFlatMenu(locale) {
            return getMenu(locale)
                .then(function (menu) {
                    locale = locale || self.currentLocale;
                    self.flatNavigation[locale] = self.flatNavigation[locale] || flatMenu(menu);
                    return self.flatNavigation[locale];
                })
        }

        function flatMenu(menu, flat) {
            flat = flat || [];
            flat.push(menu);
            _.each(menu.children, function (item) {
                flatMenu(item, flat);
            });
            return flat;
        }

        function findInNavigation(id, locale) {
            return getFlatMenu(locale)
                .then(function(flat) {
                    var params = _.find(flat, {id: String(id)});
                    return params ? new Catalog(params) : null
                });
        }

        function findParentInNavigation(childId, locale) {
            var params = _.find(self.flatNavigation[locale || self.currentLocale], function (val) {
                return !!_.find(val.children, {id: childId});
            });
            return params ? new Catalog(params) : null
        }
	}

})(angular);

(function (angular) {
    angular
        .module('pds.search.directive')
        .directive('activeSearch', function() {
            return {
                restrict: 'A',
                link: link
            }
        });

        function link(scope, element, attrs) {

            element
                .on('focus', function(e) {
                    document.body.classList.add('search-active');
                })
                .on('blur', function(e) {
                    document.body.classList.remove('search-active');
                });

            angular.element('#js-show-header-search')
                .on('click', 'a', function(e) {
                    element.trigger('focus');
                });
        }

})(angular);

(function (angular) {
    angular
        .module('pds.search.directive')
        .component('ocsQuickSearch', {
            template:  ['$templateCache', function($templateCache) {
                return $templateCache.get('component/quick_search.html')
            }],
            transclude: true,
            controller: ocsQuickSearchController
        });

    ocsQuickSearchController.$inject = ['_', '$location', '$state', '$rootScope', 'SearchService', '$window'];

    function ocsQuickSearchController(_, $location, $state, $rootScope, SearchService, $window) {
        var self = this;

        self.suggest = _.throttle(suggest, 200);
        self.goTo = goTo;
        self.doSearch = doSearch;
        self.searchPageUrl = angular.element('#header-search').attr('search-page-url') || 'search.html';

        //FIXME a hack to proceed to state `search` after entering search.html
        var path = $location.path();
        if (path && path.indexOf('search.html') > -1 && !$state.is('search')) {
            $state.go('search');
        }

        function suggest() {
            return SearchService
                .suggest(self.quicksearch)
                .then(function(data) {
                    return self.autosuggest = data;
                });
        }

        function goTo(target) {
            $rootScope.$broadcast('pds.search.navigate', {target: target});
        }

        function doSearch($item) {
            if (!$item || $item.which === 13) {
                $window.navigate(self.searchPageUrl + '?terms=' + self.quicksearch);
            }
        }
    }
})(angular);

(function (angular) {
    angular
        .module('pds.search.directive')
        .component('ocsSearch', {
            template:  ['$templateCache', function($templateCache) {
                return $templateCache.get('component/search.html')
            }],
            controller: ocsSearchController
        });

    ocsSearchController.$inject = ['$anchorScroll', 'SearchService', 'cmsSearchListener', '$rootScope', '$location', '$window', '_', 'translateFilter'];

    function ocsSearchController($anchorScroll, SearchService, cmsSearchListener, $rootScope, $location, $window, _, translateFilter) {
        var self = this;

        self.finalSearchResults = [];
        self.searchTerm = $location.search().terms;
        self.contactText = translateFilter('SEARCH.NO.RESULT.CHECKLIST.3', {contactLink: "<a href='" + translateFilter('SEARCH.CONTACT.URL') + "' class='link-inline' target='_self'>" + translateFilter('SEARCH.CONTACT') + "</a>"});
        self.onSearchInput = onSearchInput;
        self.goToAnchor = goToAnchor;
        self.goMore = goMore;

        cmsSearchListener
            .listen()
            .then(function (param) {
                $window.location.href = param.target.resourceLocation;
            });
        search();

        function search() {
            if (!self.searchTerm) {
                return;
            }
            self.totalLength = false;
            $location.search('terms', self.searchTerm);

            return SearchService
                .search(self.searchTerm)
                .then(function(data) {
                    self.totalLength = data.length;
                    self.finalSearchResults = _.groupBy(data, 'channelDiscriminator');
                });
        }

        function onSearchInput(keyEvent) {
            if (keyEvent.which === 13) {
                search();
            }
        }

        function goToAnchor(idToGo) {
            $location.hash(idToGo);
            $anchorScroll.yOffset = 80;
            $anchorScroll();
        }

        function goMore(param) {
            $rootScope.$broadcast('pds.search.navigate', {target: param});
        }

    }
})(angular);

(function(angular) {
    angular
        .module('pds.search.model')
        .config(SearchProvider);

    SearchProvider.$inject = ['env', 'SearchProvider'];

    function SearchProvider(env, SearchProvider) {
        SearchProvider.searchEndpoint(env.endPoint.searchService);
    }

})(angular);

(function (angular) {
    angular
        .module('pds.search.model')
        .provider('Search', function () {
            var url = null;

            this.searchEndpoint = function (value) {
                url = value;
                return this;
            };

            this.$get = ['$resource', 'locale', function ($resource, locale) {
                return new Search($resource, locale, url);
            }];
        });

    function Search($resource, locale, url) {
        var methods = {
            localize: {method: 'GET', isArray: true, params: {type: 'localize'}}
        };
        return $resource(url + 'resource/:type/:locale', {locale: locale}, methods);
    }
})(angular);

(function(angular) {
    angular
        .module('pds.search.route')
        .config(RouteConfig);

    RouteConfig.$inject = ['$stateProvider'];

    function RouteConfig($stateProvider) {
        $stateProvider.pdsRoute({
            name: 'search',
            params: {
                terms: null
            },
            url: 'search.html',
            templateUrl: 'search.html'
        });
    }
})(angular);

(function (angular) {
    angular
        .module('pds.search.service')
        .service('cmsSearchListener', CmsSearchListener);

    CmsSearchListener.$inject = ['$rootScope', '$q', 'config'];

    function CmsSearchListener($root, $q, config) {
        this.listen = function () {
            var def = $q.defer();
            $root.$on('pds.search.navigate', function (event, params) {
                if (!!params.target.resourceLocation) {
                    def.resolve(params);
                }
            });
            return def.promise;
        }
    }
})(angular);

(function(angular) {
	angular
		.module("pds.search.service")
		.service("SearchService", SearchService);

	SearchService.$inject = ['$q', 'Search', 'locale'];

    var MIN_AUTOSUGGEST_TERM_LENGTH = 2;

    function SearchService($q, Search, locale) {
		return {
			search: search,
			suggest: suggest
		};

		function search(search) {
			return Search.query({locale: locale, searchTerm: search}).$promise;
		}

		function suggest(searchTerm) {
            if (searchTerm && searchTerm.length > MIN_AUTOSUGGEST_TERM_LENGTH) {
                return Search.localize({locale: locale, searchTerm: searchTerm}).$promise;
            }
			return $q.resolve([]);
		}

	}

})(angular);

//# sourceMappingURL=data:application/json;charset=utf8;base64,
